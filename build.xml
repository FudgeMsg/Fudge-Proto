<project name="fudge-proto" default="compile">
	
	<available file="${basedir}/../../common/common.xml" property="common.dir" value="${basedir}/../../common" />

	<property file="build.properties"/>

	<target name="parser"
		description="--> build the grammar parser">
		<exec executable="antlr3" dir="src">
			<arg value="-o" />
			<arg value="." />
			<arg value="org/fudgemsg/proto/antlr/Proto.g" />
		</exec>
	</target>

	<target name="clean-tests" depends="clean-tests-ant,clean-tests-c,clean-tests-cs,clean-tests-cpp,clean-tests-default,clean-tests-java,clean-tests-proto"
		description="--> delete the output from the test scripts">
	</target>

	<target name="clean-tests-ant" description="--> delete the output from the Ant test scripts"><delete dir="${tests.dir}/out_ant" /></target>
	<target name="clean-tests-c" description="--> delete the output from C test scripts"><delete dir="${tests.dir}/out_C" /></target>
	<target name="clean-tests-cs" description="--> delete the output from C# test scripts"><delete dir="${tests.dir}/out_C#" /></target>
	<target name="clean-tests-cpp" description="--> delete the output from C++ test scripts"><delete dir="${tests.dir}/out_C++" /></target>
	<target name="clean-tests-default" description="--> delete the output from default test scripts"><delete dir="${tests.dir}/out_default" /></target>
	<target name="clean-tests-java" description="--> delete the output from Java test scripts"><delete dir="${tests.dir}/out_Java/*" /></target>
	<target name="clean-tests-proto" description="--> delete the output from .proto test scripts"><delete dir="${tests.dir}/out_proto" /></target>

	<target name="compile-proto-java"
		depends="tests"
		description="--> compile the output of the Java code generator">
		<javac	srcdir="${tests.dir}/out_Java"
			destdir="${tests.dir}/out_Java"
			classpathref="lib.path.id"
			debug="${build.debug}"
			optimize="${build.optimize}"
			verbose="${build.verbose}"
			listfiles="${build.listfiles}" />
	</target>

	<target name="test-proto-java" depends="compile-proto-java"
		description="--> test the output of the Java code generator">
		<javac	srcdir="${tests.dir}/unit_Java"
			destdir="${tests.dir}/out_Java"
			classpathref="lib.path.id"
			debug="${build.debug}"
			optimize="${build.optimize}"
			verbose="${build.verbose}"
			listfiles="${build.listfiles}" />
		<mkdir dir="${tests.dir}/out_Java/xml" />
		<junit printSummary="true" fork="true" forkmode="once">
			<classpath>
				<path refid="lib.path.id" />
				<pathelement path="${classes.dir}" />
				<pathelement path="${tests.dir}/out_Java" />
			</classpath>
			<assertions>
				<enable />
			</assertions>
			<formatter type="xml" />
			<batchtest todir="${tests.dir}/out_Java/xml">
				<fileset dir="${tests.dir}/unit_Java" includes="**/*Test.java" />
			</batchtest>
		</junit>
		<mkdir dir="${tests.dir}/out_Java/html" />
		<junitreport todir="${tests.dir}/out_Java/xml">
			<fileset dir="${tests.dir}/out_Java/xml" includes="TEST-*.xml" />
			<report todir="${tests.dir}/out_Java/html" />
		</junitreport>
	</target>

	<target name="test-ant-prep" depends="compile-src,test-proto-java">
		<path id="fudge.proto.path.id">
			<path refid="lib.path.id" />
			<pathelement path="${classes.dir}" />
		</path>
		<path id="fudge.ant.path.id">
			<path refid="lib.path.id" />
			<pathelement path="${tests.dir}/out_Java" />
		</path>
		<taskdef name="fudgeproto" classname="org.fudgemsg.proto.AntTask" classpathref="fudge.proto.path.id" />
		<mkdir dir="${tests.dir}/out_ant" />
	</target>

	<target name="test-ant-reqmut" depends="test-ant-prep">
		<mkdir dir="${tests.dir}/out_ant/reqmut" />
		<fudgeproto srcdir="${tests.dir}/proto" destdir="${tests.dir}/out_ant/reqmut" verbose="${build.verbose}" fudgeContext="org.fudgemsg.FudgeContext.GLOBAL_DEFAULT" fieldsMutable="true" fieldsRequired="true" gitIgnore="true">
			<exclude name="errors/*" />
		</fudgeproto>
		<javac srcdir="${tests.dir}/out_ant/reqmut" destdir="${tests.dir}/out_ant/reqmut" classpathref="fudge.ant.path.id" debug="${build.debug}" optimize="${build.optimize}" verbose="${build.verbose}" listfiles="${build.listfiles}" />
	</target>
	<target name="test-ant-reqro" depends="test-ant-prep">
		<mkdir dir="${tests.dir}/out_ant/reqro" />
		<fudgeproto srcdir="${tests.dir}/proto" destdir="${tests.dir}/out_ant/reqro" verbose="${build.verbose}" fudgeContext="org.fudgemsg.FudgeContext.GLOBAL_DEFAULT" fieldsMutable="false" fieldsRequired="true" gitIgnore="true">
			<exclude name="errors/*" />
		</fudgeproto>
		<javac srcdir="${tests.dir}/out_ant/reqro" destdir="${tests.dir}/out_ant/reqro" classpathref="fudge.ant.path.id" debug="${build.debug}" optimize="${build.optimize}" verbose="${build.verbose}" listfiles="${build.listfiles}" />
	</target>
	<target name="test-ant-optmut" depends="test-ant-prep">
		<mkdir dir="${tests.dir}/out_ant/optmut" />
		<fudgeproto srcdir="${tests.dir}/proto" destdir="${tests.dir}/out_ant/optmut" verbose="${build.verbose}" fudgeContext="org.fudgemsg.FudgeContext.GLOBAL_DEFAULT" fieldsMutable="true" fieldsRequired="false" gitIgnore="true">
			<exclude name="errors/*" />
		</fudgeproto>
		<javac srcdir="${tests.dir}/out_ant/optmut" destdir="${tests.dir}/out_ant/optmut" classpathref="fudge.ant.path.id" debug="${build.debug}" optimize="${build.optimize}" verbose="${build.verbose}" listfiles="${build.listfiles}" />
	</target>
	<target name="test-ant-optro" depends="test-ant-prep">
		<mkdir dir="${tests.dir}/out_ant/optro" />
		<fudgeproto srcdir="${tests.dir}/proto" destdir="${tests.dir}/out_ant/optro" verbose="${build.verbose}" fudgeContext="org.fudgemsg.FudgeContext.GLOBAL_DEFAULT" fieldsMutable="false" fieldsRequired="false" gitIgnore="true">
			<exclude name="errors/*" />
		</fudgeproto>
		<javac srcdir="${tests.dir}/out_ant/optro" destdir="${tests.dir}/out_ant/optro" classpathref="fudge.ant.path.id" debug="${build.debug}" optimize="${build.optimize}" verbose="${build.verbose}" listfiles="${build.listfiles}" />
	</target>

	<target name="test-ant" depends="test-ant-reqmut,test-ant-reqro,test-ant-optmut,test-ant-optro" description="--> test the ant task">
	</target>

	<import file="${common.dir}/common.xml"/>

</project>
